package ru.innopolis.uni.course3.patterns.singlton;

/**
 * Подходит для работы в многопоточности.
 * У этого варианта есть только один недостаток. Синхронизация полезна только один раз, при первом обращении
 * к getInstance(), после этого каждый раз, при обращении этому методу, синхронизация просто забирает время.
 * Ну, во-первых, если вызов getInstance() не происходит достаточно часто, то этот метод имеет преимущество
 * перед остальными – прост, понятен, лениво инициализируется, дает возможность обрабатывать
 * исключительные ситуации в конструкторе. А во-вторых, синхронизация в Java перестала быть обременительно медленной
 * настолько, насколько ее боятся.
 + Ленивая инициализация
 - Низкая производительность (критическая секция) в наиболее типичном доступе
 */
public class Singlton4 {

    private static Singlton4 instance;

    private Singlton4() {
    }

    public static synchronized Singlton4 getInstance(){
        if(instance == null){
            instance = new Singlton4();
        }
        return instance;
    }
}
